{"name":"Cosmos","tagline":"Accumulo-backed sorting, filtering and grouping of sparse, columnar data sets","body":"Cosmos\r\n========\r\n\r\nCosmos was driven by the necessity to sort, filter and count large swaths of \r\ndata queried from an Accumulo instance. Cosmos currently accepts columnar data sets\r\nwithout a guaranteed schema. Because of this, and the support for multiple users \r\nto write concurrently to one Accumulo instance using Cosmos, this software scales \r\nwell given sufficient Accumulo nodes for the concurrent client write threads.\r\n\r\n## Using Cosmos\r\n\r\nBuild the cosmos-core jar using `mvn package` and place it on the Accumulo classpath\r\nin addition to your application. Your client code must then implement the transformation\r\nfrom your data model to the MultimapQueryResult. From here, you can treat your records \r\nuniformly using the Cosmos API.\r\n\r\n\r\n## Functionality\r\n\r\nCosmos supports the followign features:\r\n\r\n1. Fetch records by unique identifier\r\n2. Fetch records by column, ascending or descending\r\n3. Fetch records by value in a column\r\n4. Count unique occurrences of a value in a column (SQL groupby)\r\n\r\nFor each call above, result sets can also be paginated by Cosmos to alleviate large result sets. \r\nAs such, each operation lazily creates the result set so as to avoid excessive Java heap usage.\r\n\r\n## Requirements\r\n\r\nCosmos requires a functioning Accumulo instance and a ZooKeeper instance (can be the same as the \r\nZooKeeper instance used by the Accumulo installation).\r\n\r\n## License\r\n\r\nIn keeping with the Apache Hadoop ecosphere, Cosmos is licensed with the Apache Software License.\r\n\r\nCopyright 2013 Josh Elser\r\n\r\n## Contributors\r\n\r\nJosh Elser -- SRA International\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}